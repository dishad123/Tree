class Solution {
    public int maxPathSum(TreeNode root) {
       int [] maxValue =new int[1];
        maxValue[0]=Integer.MIN_VALUE;
        maxPathDown(root,maxValue);
        return maxValue[0];
    }
   private int maxPathDown(TreeNode node,int[]maxValue){
       if(node==null){
           return 0;
       }
       int left=Math.max(0,maxPathDown(node.left,maxValue));
       int right=Math.max(0,maxPathDown(node.right,maxValue));
       maxValue[0]=Math.max(maxValue[0],left+right+node.val);
       return Math.max(left,right)+node.val;
   }
    
}

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
